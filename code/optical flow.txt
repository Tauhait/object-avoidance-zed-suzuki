import cv2 as cv
import numpy as np
import rospy
from std_msgs.msg import Int32

# Key function for matrix multiplication
def matrix_mul(mat):
    return result_vector

# Key function for the sigmoid calculation
def sigmoid(x):
    return 1/(1 + np.exp(-x))

# Optical flow calculation and decision making
while True:
    ret, frame = cap.read()
    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    flow = cv.calcOpticalFlowFarneback(prev_gray, gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)
    magnitude, angle = cv.cartToPolar(flow[..., 0], flow[..., 1])
    flow_ = int(matrix_mul(flow))

    # Decision-making based on optical flow
    if(flow_ < (-1 * const.CLOSENESS_THRES)):
        decision = const.TRAFFIC_FROM_LEFT
    elif(flow_ > const.CLOSENESS_THRES):
        decision = const.TRAFFIC_FROM_RIGHT
    else:
        decision = const.SAFE_TO_OVERTAKE

    optical_flow_publish.publish(decision)

    prev_gray = gray
